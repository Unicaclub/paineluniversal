#!/usr/bin/env python3
"""
Teste abrangente para validar todas as funcionalidades cr√≠ticas
Garante que nenhuma funcionalidade de produ√ß√£o foi quebrada
"""
import requests
import json
import time
from datetime import datetime

BASE_URL = "http://127.0.0.1:8000"

def test_health():
    """Teste b√°sico de sa√∫de do servidor"""
    print("1Ô∏è‚É£ Testando sa√∫de do servidor...")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor respondendo corretamente")
            return True
        else:
            print(f"‚ùå Servidor com problema: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def test_user_registration():
    """Teste de registro de usu√°rio"""
    print("\n2Ô∏è‚É£ Testando registro de usu√°rio...")
    try:
        test_time = int(time.time())
        user_data = {
            "nome": f"Teste Valida√ß√£o {test_time}",
            "email": f"teste_validacao_{test_time}@exemplo.com",
            "cpf": f"111{test_time}"[-11:],
            "telefone": "11999999999",
            "senha": "123456",
            "tipo": "cliente"
        }
        
        response = requests.post(f"{BASE_URL}/auth/register", json=user_data, timeout=30)
        
        if response.status_code == 200:
            print("‚úÖ Registro de usu√°rio funcionando")
            return response.json()
        else:
            print(f"‚ùå Erro no registro: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Erro no registro: {e}")
        return None

def test_user_login(user_data):
    """Teste de login de usu√°rio"""
    print("\n3Ô∏è‚É£ Testando login de usu√°rio...")
    try:
        login_data = {
            "cpf": user_data["cpf"],
            "senha": "123456"
        }
        
        response = requests.post(f"{BASE_URL}/auth/login", json=login_data, timeout=10)
        
        if response.status_code == 200:
            token = response.json()["access_token"]
            print("‚úÖ Login funcionando")
            return token
        else:
            print(f"‚ùå Erro no login: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Erro no login: {e}")
        return None

def test_products_api(token):
    """Teste das APIs de produtos"""
    print("\n4Ô∏è‚É£ Testando APIs de produtos...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # Listar produtos
        response = requests.get(f"{BASE_URL}/produtos", headers=headers, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Listagem de produtos funcionando")
        else:
            print(f"‚ö†Ô∏è Listagem de produtos: {response.status_code}")
        
        # Criar produto de teste
        test_time = int(time.time())
        produto_data = {
            "nome": f"Produto Teste {test_time}",
            "descricao": "Produto para valida√ß√£o",
            "preco": 10.0,
            "codigo_barras": f"123456{test_time}",
            "estoque_atual": 100
        }
        
        response = requests.post(f"{BASE_URL}/produtos", json=produto_data, headers=headers, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Cria√ß√£o de produtos funcionando")
            return response.json()["id"]
        else:
            print(f"‚ö†Ô∏è Cria√ß√£o de produtos: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro nos produtos: {e}")
        return None

def test_events_api(token):
    """Teste das APIs de eventos"""
    print("\n5Ô∏è‚É£ Testando APIs de eventos...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # Listar eventos
        response = requests.get(f"{BASE_URL}/eventos", headers=headers, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Listagem de eventos funcionando")
            return True
        else:
            print(f"‚ö†Ô∏è Listagem de eventos: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro nos eventos: {e}")
        return False

def test_admin_endpoints(token):
    """Teste de endpoints administrativos"""
    print("\n6Ô∏è‚É£ Testando endpoints administrativos...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # Dashboard
        response = requests.get(f"{BASE_URL}/dashboard/resumo", headers=headers, timeout=10)
        if response.status_code in [200, 401, 403]:  # 401/403 s√£o aceit√°veis por permiss√£o
            print("‚úÖ Dashboard respondendo")
        else:
            print(f"‚ö†Ô∏è Dashboard: {response.status_code}")
        
        return True
            
    except Exception as e:
        print(f"‚ùå Erro nos endpoints admin: {e}")
        return False

def cleanup_test_data(token, user_id, produto_id):
    """Limpar dados de teste"""
    print("\nüßπ Limpando dados de teste...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # Remover produto de teste
        if produto_id:
            response = requests.delete(f"{BASE_URL}/produtos/{produto_id}", headers=headers, timeout=10)
            if response.status_code in [200, 204, 404]:
                print("‚úÖ Produto de teste removido")
            else:
                print(f"‚ö†Ô∏è Produto n√£o removido: {response.status_code}")
        
        print("‚úÖ Limpeza conclu√≠da")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na limpeza: {e}")
        return False

def main():
    """Executar todos os testes de valida√ß√£o"""
    print("üß™ VALIDA√á√ÉO COMPLETA DO SISTEMA")
    print("=" * 50)
    print("Objetivo: Garantir que nenhuma funcionalidade foi quebrada")
    print("=" * 50)
    
    success_count = 0
    total_tests = 6
    
    # 1. Teste de sa√∫de
    if test_health():
        success_count += 1
    
    # 2. Teste de registro
    user_data = test_user_registration()
    if user_data:
        success_count += 1
        
        # 3. Teste de login
        token = test_user_login(user_data)
        if token:
            success_count += 1
            
            # 4. Teste de produtos
            produto_id = test_products_api(token)
            if produto_id is not None:
                success_count += 1
            
            # 5. Teste de eventos
            if test_events_api(token):
                success_count += 1
            
            # 6. Teste de admin
            if test_admin_endpoints(token):
                success_count += 1
            
            # Limpeza
            cleanup_test_data(token, user_data.get("id"), produto_id)
    
    # Resultados finais
    print("\n" + "=" * 50)
    print("üìä RESULTADOS DA VALIDA√á√ÉO")
    print("=" * 50)
    print(f"‚úÖ Testes bem-sucedidos: {success_count}/{total_tests}")
    print(f"üìà Taxa de sucesso: {(success_count/total_tests)*100:.1f}%")
    
    if success_count == total_tests:
        print("\nüéâ SISTEMA TOTALMENTE FUNCIONAL!")
        print("‚úÖ Todas as funcionalidades cr√≠ticas est√£o operacionais")
        print("‚úÖ Seguro para aplicar corre√ß√µes na produ√ß√£o")
    elif success_count >= total_tests * 0.8:
        print("\n‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
        print("‚ö†Ô∏è A maioria das funcionalidades est√° ok")
        print("‚ö†Ô∏è Revisar falhas antes de aplicar na produ√ß√£o")
    else:
        print("\n‚ùå SISTEMA COM PROBLEMAS CR√çTICOS")
        print("‚ùå Muitas funcionalidades falharam")
        print("‚ùå N√ÉO aplicar na produ√ß√£o at√© resolver")
    
    return success_count == total_tests

if __name__ == "__main__":
    main()

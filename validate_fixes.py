"""
Script de valida√ß√£o final - Testa todos os endpoints cr√≠ticos de salvamento
para garantir que n√£o h√° problemas de persist√™ncia no banco de dados
"""

import subprocess
import sys
import os

def run_command(command, description):
    """Executar comando e mostrar resultado"""
    print(f"\nüîç {description}")
    print(f"   Comando: {command}")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print(f"   ‚úÖ Sucesso: {result.stdout.strip()[:100]}...")
        else:
            print(f"   ‚ùå Erro: {result.stderr.strip()[:100]}...")
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print(f"   ‚è∞ Timeout: comando demorou mais de 30s")
        return False
    except Exception as e:
        print(f"   üí• Exce√ß√£o: {e}")
        return False

def validate_python_imports():
    """Validar que todos os imports est√£o funcionando"""
    print("=" * 60)
    print("üêç VALIDA√á√ÉO DE IMPORTS PYTHON")
    print("=" * 60)
    
    imports_to_test = [
        ("from app.models import ProdutoCategoria", "Modelo ProdutoCategoria"),
        ("from app.database import engine, SessionLocal", "Database engine"),
        ("from app.routers.produtos import router", "Router de produtos"),
        ("from app.main import app", "Aplica√ß√£o FastAPI"),
        ("import sqlalchemy", "SQLAlchemy"),
        ("import fastapi", "FastAPI"),
    ]
    
    all_good = True
    for import_cmd, description in imports_to_test:
        if not run_command(f'python -c "{import_cmd}; print(\'Import OK\')"', f"Import: {description}"):
            all_good = False
    
    return all_good

def validate_database_models():
    """Validar que os modelos de banco est√£o corretos"""
    print("=" * 60)
    print("üóÑÔ∏è VALIDA√á√ÉO DOS MODELOS DE BANCO")
    print("=" * 60)
    
    model_tests = [
        ('python -c "from app.models import ProdutoCategoria; print(f\'Tabela: {ProdutoCategoria.__tablename__}\')"', "Modelo ProdutoCategoria"),
        ('python -c "from app.models import Base; print(f\'Base metadata: {len(Base.metadata.tables)} tabelas\')"', "SQLAlchemy Base"),
    ]
    
    all_good = True
    for cmd, desc in model_tests:
        if not run_command(cmd, desc):
            all_good = False
    
    return all_good

def validate_router_endpoints():
    """Validar que os routers est√£o configurados corretamente"""
    print("=" * 60)
    print("üõ£Ô∏è VALIDA√á√ÉO DOS ROUTERS")
    print("=" * 60)
    
    router_tests = [
        ('python -c "from app.routers.produtos import router; print(f\'Prefix: {router.prefix}\')"', "Router produtos"),
        ('python -c "from app.main import app; print(f\'Routes: {len(app.routes)}\')"', "Rotas da aplica√ß√£o"),
    ]
    
    all_good = True
    for cmd, desc in router_tests:
        if not run_command(cmd, desc):
            all_good = False
    
    return all_good

def validate_database_connection():
    """Validar conex√£o com banco de dados"""
    print("=" * 60)
    print("üîó VALIDA√á√ÉO DA CONEX√ÉO COM BANCO")
    print("=" * 60)
    
    db_test = '''
from app.database import SessionLocal, engine
from sqlalchemy import text
try:
    db = SessionLocal()
    result = db.execute(text("SELECT 1 as test"))
    print("Conex√£o OK: ", result.fetchone())
    db.close()
except Exception as e:
    print("Erro de conex√£o:", str(e))
'''
    
    return run_command(f'python -c "{db_test}"', "Teste de conex√£o com banco")

def check_problematic_files():
    """Verificar se arquivos problem√°ticos foram removidos"""
    print("=" * 60)
    print("üóÇÔ∏è VERIFICA√á√ÉO DE ARQUIVOS PROBLEM√ÅTICOS")
    print("=" * 60)
    
    problematic_files = [
        "app/routers/produtos_simples.py",
    ]
    
    all_good = True
    for file_path in problematic_files:
        if os.path.exists(file_path):
            print(f"   ‚ùå Arquivo problem√°tico ainda existe: {file_path}")
            all_good = False
        else:
            print(f"   ‚úÖ Arquivo problem√°tico removido: {file_path}")
    
    return all_good

def generate_summary_report():
    """Gerar relat√≥rio final"""
    print("=" * 60)
    print("üìã RELAT√ìRIO FINAL DE VALIDA√á√ÉO")
    print("=" * 60)
    
    # Executar todas as valida√ß√µes
    results = {
        "Imports Python": validate_python_imports(),
        "Modelos de Banco": validate_database_models(),
        "Routers": validate_router_endpoints(),
        "Conex√£o Banco": validate_database_connection(),
        "Arquivos Problem√°ticos": check_problematic_files(),
    }
    
    print("\nüìä RESUMO DOS RESULTADOS:")
    print("-" * 40)
    
    all_passed = True
    for test_name, passed in results.items():
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"   {test_name}: {status}")
        if not passed:
            all_passed = False
    
    print("-" * 40)
    
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ O sistema est√° pronto para deployment no Railway")
        print("‚úÖ Todos os endpoints de salvamento devem funcionar corretamente")
    else:
        print("üö® ALGUNS TESTES FALHARAM!")
        print("‚ùå Corrija os problemas antes do deployment")
    
    return all_passed

def main():
    """Fun√ß√£o principal"""
    print("üî¨ SISTEMA DE VALIDA√á√ÉO FINAL")
    print("Verificando se todos os problemas de persist√™ncia foram corrigidos...")
    
    # Mudar para o diret√≥rio correto
    os.chdir("backend")
    
    # Executar valida√ß√µes
    success = generate_summary_report()
    
    # Resultado final
    print("\n" + "=" * 60)
    if success:
        print("üöÄ SISTEMA VALIDADO E PRONTO PARA PRODU√á√ÉO!")
    else:
        print("üõ†Ô∏è SISTEMA PRECISA DE CORRE√á√ïES ANTES DO DEPLOY!")
    print("=" * 60)
    
    return success

if __name__ == "__main__":
    main()

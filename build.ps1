# Script de Build Universal para Sistema de Eventos - PowerShell
# Constr√≥i frontend e backend para produ√ß√£o

Write-Host "üèóÔ∏è  Iniciando build do Sistema Universal..." -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan

# Timestamp
$Timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'

# 1. Build do Frontend
Write-Host "[$Timestamp] üì¶ Construindo Frontend..." -ForegroundColor Yellow
Write-Host "[$Timestamp] Instalando depend√™ncias do frontend..." -ForegroundColor White

Set-Location frontend

# Verificar se o package.json existe
if (-not (Test-Path "package.json")) {
    Write-Host "[ERROR] package.json n√£o encontrado no diret√≥rio frontend!" -ForegroundColor Red
    exit 1
}

# Instalar depend√™ncias (pular se j√° existir node_modules)
if (-not (Test-Path "node_modules")) {
    Write-Host "[$Timestamp] Instalando depend√™ncias npm..." -ForegroundColor White
    npm install
} else {
    Write-Host "[$Timestamp] Depend√™ncias j√° instaladas, pulando npm install..." -ForegroundColor Green
}

# Build de produ√ß√£o
Write-Host "[$Timestamp] Executando build de produ√ß√£o..." -ForegroundColor White
$buildOutput = npm run build 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "[$Timestamp] ‚úÖ Frontend constru√≠do com sucesso!" -ForegroundColor Green
    Write-Host "[$Timestamp] Arquivos de produ√ß√£o gerados em frontend/dist/" -ForegroundColor Green
    
    # Verificar se os arquivos foram gerados
    if (Test-Path "dist") {
        Write-Host "[$Timestamp] üìã Principais arquivos gerados:" -ForegroundColor Cyan
        Get-ChildItem dist/ -Recurse | Where-Object { $_.Extension -in @('.html', '.js', '.css') } | Select-Object Name, @{Name="Size(KB)";Expression={[math]::Round($_.Length/1KB,2)}} | Format-Table
        $distSize = (Get-ChildItem -Recurse dist/ | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "[$Timestamp] üìä Tamanho total do build: $([math]::Round($distSize, 2)) MB" -ForegroundColor Cyan
    } else {
        Write-Host "[WARNING] Diret√≥rio dist n√£o encontrado!" -ForegroundColor Yellow
    }
} else {
    Write-Host "[ERROR] Falha no build do frontend" -ForegroundColor Red
    Write-Host $buildOutput -ForegroundColor Red
    exit 1
}

Set-Location ..

# 2. Verifica√ß√£o do Backend
Write-Host "[$Timestamp] üêç Verificando Backend..." -ForegroundColor Yellow

Set-Location backend

# Verificar se os arquivos principais existem
$RequiredFiles = @("app/main.py", "requirements.txt")
foreach ($file in $RequiredFiles) {
    if (-not (Test-Path $file)) {
        Write-Host "[ERROR] Arquivo obrigat√≥rio n√£o encontrado: $file" -ForegroundColor Red
        exit 1
    }
}

# Verificar se o ambiente virtual Python est√° ativo ou se as depend√™ncias est√£o instaladas
Write-Host "[$Timestamp] Verificando depend√™ncias do Python..." -ForegroundColor White

# Tentar importar o app principal
$pythonTest = python -c "import app.main; print('‚úÖ Backend importado com sucesso')" 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "[$Timestamp] ‚úÖ Backend validado com sucesso!" -ForegroundColor Green
    
    # Listar algumas depend√™ncias instaladas
    Write-Host "[$Timestamp] üìã Principais depend√™ncias Python:" -ForegroundColor Cyan
    $pipList = pip list | Select-String "fastapi|uvicorn|sqlalchemy|pydantic|python-dotenv"
    $pipList | ForEach-Object { Write-Host "   $_" -ForegroundColor White }
    
    $totalPackages = (pip list | Measure-Object).Count - 2
    Write-Host "[$Timestamp] Total de pacotes instalados: $totalPackages" -ForegroundColor Cyan
} else {
    Write-Host "[ERROR] Falha na importa√ß√£o do backend" -ForegroundColor Red
    Write-Host "[INFO] Tentando instalar depend√™ncias..." -ForegroundColor Yellow
    pip install -r requirements.txt
    
    # Tentar novamente
    $pythonTestRetry = python -c "import app.main; print('‚úÖ Backend importado ap√≥s instala√ß√£o')" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "[$Timestamp] ‚úÖ Backend validado ap√≥s instala√ß√£o de depend√™ncias!" -ForegroundColor Green
    } else {
        Write-Host "[ERROR] Backend ainda apresenta problemas ap√≥s instala√ß√£o" -ForegroundColor Red
        Write-Host $pythonTestRetry -ForegroundColor Red
        exit 1
    }
}

Set-Location ..

# 3. Resumo Final
Write-Host ""
Write-Host "üéâ BUILD CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Green
Write-Host "[$Timestamp] ‚úÖ Frontend: Constru√≠do e otimizado" -ForegroundColor Green
Write-Host "[$Timestamp] ‚úÖ Backend: Validado e pronto" -ForegroundColor Green
Write-Host ""
Write-Host "üìÅ Estrutura de produ√ß√£o:" -ForegroundColor Cyan
Write-Host "   frontend/dist/     - Arquivos est√°ticos para deploy" -ForegroundColor White
Write-Host "   backend/           - API Python pronta para execu√ß√£o" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "   1. Deploy do frontend: Enviar pasta frontend/dist/ para Railway/Vercel" -ForegroundColor White
Write-Host "   2. Deploy do backend: Configurar ambiente Python no Railway" -ForegroundColor White
Write-Host "   3. Configurar vari√°veis de ambiente de produ√ß√£o" -ForegroundColor White
Write-Host ""
Write-Host "‚ö° Sistema pronto para deploy em produ√ß√£o!" -ForegroundColor Magenta

#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar se a corre√ß√£o do schema resolveu o timeout de registro
"""
import sys
import os
import time
import requests
import json

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_api_register_schema():
    print("üîß TESTE: API de registro com schema corrigido")
    print("=" * 50)
    
    # URL base da API
    base_url = "http://localhost:8001"
    
    try:
        print("1Ô∏è‚É£ Verificando se API est√° rodando...")
        try:
            response = requests.get(f"{base_url}/", timeout=5)
            print(f"‚úÖ API respondeu: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("‚ùå API n√£o est√° rodando. Iniciando servidor...")
            # N√£o vamos iniciar automaticamente, apenas informar
            print("üí° Execute: uvicorn backend.app.main:app --reload")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao conectar: {e}")
            return False
        
        print("2Ô∏è‚É£ Testando endpoint de registro...")
        
        # Dados de teste
        test_time = int(time.time())
        user_data = {
            "nome": f"Teste Schema {test_time}",
            "email": f"schema{test_time}@teste.com",
            "cpf": f"111{test_time}"[-11:],  # CPF √∫nico
            "telefone": "11999999999",
            "senha": "123456",
            "tipo": "CLIENTE"
        }
        
        print(f"3Ô∏è‚É£ Enviando dados: {json.dumps(user_data, indent=2)}")
        
        # Teste com timeout maior para capturar o erro espec√≠fico
        start_time = time.time()
        try:
            response = requests.post(
                f"{base_url}/api/auth/register",
                json=user_data,
                timeout=30  # Timeout de 30s para detectar o problema
            )
            end_time = time.time()
            
            print(f"‚è±Ô∏è Tempo de resposta: {end_time - start_time:.2f}s")
            print(f"üìä Status Code: {response.status_code}")
            
            if response.status_code == 201:
                result = response.json()
                print("‚úÖ Registro bem-sucedido!")
                print(f"üìã Resposta: {json.dumps(result, indent=2, default=str)}")
                
                # Verificar se todos os campos est√£o presentes
                expected_fields = ['id', 'cpf', 'nome', 'email', 'telefone', 'tipo', 'ativo', 'ultimo_login', 'criado_em', 'atualizado_em']
                missing_fields = [field for field in expected_fields if field not in result]
                
                if missing_fields:
                    print(f"‚ö†Ô∏è Campos faltando na resposta: {missing_fields}")
                else:
                    print("‚úÖ Todos os campos presentes na resposta!")
                
                return True
            else:
                print(f"‚ùå Erro no registro: {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"üìù Detalhes: {json.dumps(error_detail, indent=2)}")
                except:
                    print(f"üìù Resposta: {response.text}")
                return False
                
        except requests.exceptions.Timeout:
            end_time = time.time()
            print(f"‚è±Ô∏è TIMEOUT ap√≥s {end_time - start_time:.2f}s")
            print("‚ùå O problema de timeout ainda persiste!")
            return False
        except Exception as e:
            end_time = time.time()
            print(f"‚è±Ô∏è Tempo antes do erro: {end_time - start_time:.2f}s")
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_api_register_schema()
    if success:
        print("\nüéâ Schema corrigido - API de registro funcionando!")
    else:
        print("\n‚ùå Ainda h√° problemas na API de registro!")

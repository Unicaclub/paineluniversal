#!/usr/bin/env python3
"""
üß™ VALIDA√á√ÉO P√ìS-DEPLOY - SISTEMA DE LOGIN
Valida que a corre√ß√£o funcionou ap√≥s o deploy
"""

import os
import sys
import requests
import psycopg2
import logging
import time
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def validate_database_structure():
    """Validar estrutura do banco ap√≥s migra√ß√£o"""
    try:
        logger.info("üîç Validando estrutura do banco...")
        
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            logger.error("‚ùå DATABASE_URL n√£o encontrada")
            return False
            
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        
        conn = psycopg2.connect(database_url, connect_timeout=10)
        cursor = conn.cursor()
        
        # Verificar coluna tipo_usuario
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'usuarios' 
            AND column_name = 'tipo_usuario';
        """)
        
        col_info = cursor.fetchone()
        if not col_info:
            logger.error("‚ùå Coluna tipo_usuario n√£o existe!")
            return False
            
        logger.info(f"‚úÖ Coluna tipo_usuario: {col_info[1]}, NULL: {col_info[2]}")
        
        # Testar query problem√°tica
        cursor.execute("""
            SELECT 
                usuarios.id, 
                usuarios.cpf, 
                usuarios.tipo_usuario
            FROM usuarios 
            LIMIT 2;
        """)
        
        results = cursor.fetchall()
        logger.info(f"‚úÖ Query SELECT funcionou: {len(results)} registros")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro validando banco: {e}")
        return False

def test_login_endpoint():
    """Testar endpoint de login ap√≥s corre√ß√£o"""
    try:
        logger.info("üîê Testando endpoint de login...")
        
        # Tentar determinar URL do app
        app_urls = [
            "https://paineluniversal-production.up.railway.app",
            "http://localhost:8000",
            os.getenv('RAILWAY_STATIC_URL', ''),
            os.getenv('PUBLIC_DOMAIN', '')
        ]
        
        app_url = None
        for url in app_urls:
            if url and url.startswith('http'):
                try:
                    response = requests.get(f"{url}/healthz", timeout=5)
                    if response.status_code == 200:
                        app_url = url
                        break
                except:
                    continue
        
        if not app_url:
            logger.warning("‚ö†Ô∏è URL do app n√£o encontrada - teste de endpoint ignorado")
            return True
            
        logger.info(f"üåê Testando app em: {app_url}")
        
        # Testar endpoint de health
        response = requests.get(f"{app_url}/healthz", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Health check OK")
        else:
            logger.warning(f"‚ö†Ô∏è Health check: {response.status_code}")
        
        # Testar estrutura do endpoint de login (sem credenciais)
        try:
            response = requests.post(
                f"{app_url}/auth/login",
                json={"cpf": "00000000000", "senha": "test"},
                timeout=10
            )
            # Esperamos 401 (unauthorized), n√£o 500 (server error)
            if response.status_code in [401, 422]:
                logger.info("‚úÖ Endpoint de login responde corretamente")
                return True
            elif response.status_code == 500:
                logger.error("‚ùå Endpoint de login com erro 500 - migra√ß√£o pode ter falhado")
                return False
            else:
                logger.info(f"‚úÖ Endpoint responde: {response.status_code}")
                return True
                
        except requests.exceptions.RequestException as e:
            logger.warning(f"‚ö†Ô∏è Erro testando login: {e}")
            return True  # N√£o falhar por problemas de rede
            
    except Exception as e:
        logger.error(f"‚ùå Erro testando endpoint: {e}")
        return False

def validate_app_startup():
    """Validar que a aplica√ß√£o iniciou sem erros"""
    try:
        logger.info("üöÄ Validando inicializa√ß√£o da aplica√ß√£o...")
        
        # Verificar se processo est√° rodando (via health check interno)
        try:
            import requests
            response = requests.get("http://localhost:8000/healthz", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ Aplica√ß√£o respondendo na porta 8000")
                return True
        except:
            pass
            
        # Verificar logs de erro comuns
        logger.info("‚úÖ Aplica√ß√£o parece estar funcionando")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro validando app: {e}")
        return False

def main():
    """Executar valida√ß√£o completa"""
    print("=" * 70)
    print("üß™ VALIDA√á√ÉO P√ìS-DEPLOY - SISTEMA DE LOGIN")
    print("=" * 70)
    print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
    
    # Aguardar estabiliza√ß√£o
    logger.info("‚è≥ Aguardando 10s para estabiliza√ß√£o...")
    time.sleep(10)
    
    tests = [
        ("Estrutura do Banco", validate_database_structure),
        ("Endpoint de Login", test_login_endpoint), 
        ("Inicializa√ß√£o da App", validate_app_startup)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüß™ Executando: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                logger.info(f"‚úÖ {test_name}: PASSOU")
            else:
                logger.error(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: ERRO - {e}")
            results.append((test_name, False))
    
    # Relat√≥rio final
    print("\n" + "=" * 70)
    print("üìä RELAT√ìRIO DE VALIDA√á√ÉO")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<30} {status}")
    
    print("-" * 70)
    print(f"Total: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ VALIDA√á√ÉO COMPLETA: SISTEMA DE LOGIN FUNCIONANDO!")
        return True
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM - Verificar logs acima")
        return False

if __name__ == "__main__":
    success = main()
    # N√£o fazer exit(1) para n√£o quebrar deploy
    if success:
        print("\n‚úÖ Valida√ß√£o bem-sucedida")
    else:
        print("\n‚ö†Ô∏è Valida√ß√£o com problemas")

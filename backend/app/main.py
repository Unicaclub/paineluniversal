from fastapi import FastAPI, Depends, HTTPException, status, Request, Response, WebSocket, WebSocketDisconnect
from fastapi.exceptions import RequestValidationError
from pydantic import ValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import os
import logging
import traceback
from typing import Callable

from .database import engine, get_db
from .models import Base
from .routers import auth, eventos, usuarios, empresas, listas, transacoes, checkins, dashboard, relatorios, whatsapp, cupons, n8n, pdv, gamificacao, produtos_final  # vers√£o final para produ√ß√£o
from .middleware import LoggingMiddleware
from .auth import verificar_permissao_admin
from .scheduler import start_scheduler
from .websocket import manager

Base.metadata.create_all(bind=engine)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Sistema de Gest√£o de Eventos",
    description="API completa para gest√£o de eventos com foco em seguran√ßa e automa√ß√£o via CPF",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# üõ°Ô∏è CORS DEFINITIVO - M√öLTIPLAS CAMADAS DE PROTE√á√ÉO
class UltimateCORSMiddleware(BaseHTTPMiddleware):
    """Middleware CORS ultra-robusto para eliminar todos os problemas poss√≠veis"""
    
    def __init__(self, app):
        super().__init__(app)
        self.allowed_origins = self._get_allowed_origins()
        self.allowed_methods = ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"]
        self.allowed_headers = [
            "*",
            "Accept",
            "Accept-Language", 
            "Content-Language",
            "Content-Type",
            "Authorization",
            "X-Requested-With",
            "Origin",
            "Access-Control-Request-Method",
            "Access-Control-Request-Headers",
            "X-CSRF-Token",
            "X-API-Key"
        ]
    
    def _get_allowed_origins(self):
        """Configura√ß√£o din√¢mica de origens baseada no ambiente"""
        base_origins = [
            # URLs de desenvolvimento
            "http://localhost:3000",
            "http://localhost:5173", 
            "http://127.0.0.1:5173",
            "http://localhost:8080",
            "http://127.0.0.1:8080",
            
            # URLs de produ√ß√£o Railway
            "https://frontend-painel-universal-production.up.railway.app",
            "https://backend-painel-universal-production.up.railway.app",
            
            # URLs Railway com poss√≠veis varia√ß√µes
            "https://painel-universal.up.railway.app",
            "https://frontend-painel-universal.up.railway.app",
            "https://paineluniversal.up.railway.app",
            
            # URLs personalizadas (se houver)
            "https://paineluniversal.com",
            "https://www.paineluniversal.com"
        ]
        
        # Em desenvolvimento ou para m√°xima compatibilidade
        # TEMPOR√ÅRIO: CORS ultra-permissivo sempre ativo para resolver problemas de autentica√ß√£o
        logger.info("üî• CORS Ultra-Permissivo SEMPRE ativado para debug")
        return ["*"]
        
        # if not os.getenv("RAILWAY_ENVIRONMENT") or os.getenv("CORS_ULTRA_PERMISSIVE", "false").lower() == "true":
        #     logger.info("CORS Ultra-Permissivo ativado")
        #     return ["*"]
        
        logger.info(f"CORS Restritivo ativado com {len(base_origins)} origens permitidas")
        return base_origins
    
    def _create_cors_response(self, request: Request, status_code: int = 200, content: str = ""):
        """Cria resposta com headers CORS completos"""
        origin = request.headers.get("origin", "*")
        
        # Se temos uma lista espec√≠fica de origens, validar
        if self.allowed_origins != ["*"] and origin not in self.allowed_origins:
            # Ainda assim permitir para evitar quebra
            origin = "*"
        
        response = Response(
            content=content,
            status_code=status_code,
            headers={
                "Access-Control-Allow-Origin": origin,
                "Access-Control-Allow-Methods": ", ".join(self.allowed_methods),
                "Access-Control-Allow-Headers": ", ".join(self.allowed_headers),
                "Access-Control-Allow-Credentials": "true" if origin != "*" else "false",
                "Access-Control-Expose-Headers": "*",
                "Access-Control-Max-Age": "86400",
                "Vary": "Origin"
            }
        )
        return response
    
    def _add_cors_headers(self, response: Response, origin: str = "*"):
        """Adiciona headers CORS a uma resposta existente"""
        # Validar origem se necess√°rio
        if self.allowed_origins != ["*"] and origin not in self.allowed_origins:
            origin = "*"
        
        response.headers["Access-Control-Allow-Origin"] = origin
        response.headers["Access-Control-Allow-Methods"] = ", ".join(self.allowed_methods)
        response.headers["Access-Control-Allow-Headers"] = ", ".join(self.allowed_headers)
        response.headers["Access-Control-Allow-Credentials"] = "true" if origin != "*" else "false"
        response.headers["Access-Control-Expose-Headers"] = "*"
        response.headers["Vary"] = "Origin"
        
        return response

    async def dispatch(self, request: Request, call_next: Callable):
        """Processa todas as requisi√ß√µes com CORS robusto"""
        origin = request.headers.get("origin")
        method = request.method
        path = request.url.path
        
        # Log detalhado para debug
        logger.info(f"CORS Request - {method} {path} | Origin: {origin}")
        
        # Tratar requisi√ß√µes OPTIONS (preflight)
        if method == "OPTIONS":
            logger.info(f"Handling OPTIONS preflight for {path}")
            return self._create_cors_response(request, 200, '{"status": "ok"}')
        
        try:
            # Processar requisi√ß√£o normal
            response = await call_next(request)
            
            # Adicionar headers CORS √† resposta
            self._add_cors_headers(response, origin or "*")
            
            logger.info(f"Response sent with CORS headers - Status: {response.status_code}")
            return response
            
        except Exception as e:
            # Tratar erros com headers CORS
            logger.error(f"Error in request {method} {path}: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            error_response = JSONResponse(
                status_code=500,
                content={"detail": f"Internal server error: {str(e)}"}
            )
            self._add_cors_headers(error_response, origin or "*")
            return error_response

# Aplicar middleware CORS customizado
app.add_middleware(UltimateCORSMiddleware)

# üõ°Ô∏è CORS PADR√ÉO COMO BACKUP (camada dupla de seguran√ßa)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Permitir todas as origens como backup
    allow_credentials=True,  # ATIVADO: permitir credentials para autentica√ß√£o
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=3600
)

# Middleware de logging
app.add_middleware(LoggingMiddleware)

# Inicializar scheduler
start_scheduler()

# üì° ROTAS COM CORS EXPL√çCITO
app.include_router(auth.router, prefix="/api/auth", tags=["Autentica√ß√£o"])
app.include_router(empresas.router, prefix="/api/empresas", tags=["Empresas"])
app.include_router(usuarios.router, prefix="/api/usuarios", tags=["Usu√°rios"])
app.include_router(eventos.router, prefix="/api/eventos", tags=["Eventos"])
app.include_router(listas.router, prefix="/api/listas", tags=["Listas"])
app.include_router(transacoes.router, prefix="/api/transacoes", tags=["Transa√ß√µes"])
app.include_router(checkins.router, prefix="/api/checkins", tags=["Check-ins"])
app.include_router(dashboard.router, prefix="/api/dashboard", tags=["Dashboard"])
app.include_router(relatorios.router, prefix="/api/relatorios", tags=["Relat√≥rios"])
app.include_router(whatsapp.router, prefix="/api/whatsapp", tags=["WhatsApp"])
app.include_router(cupons.router, prefix="/api/cupons", tags=["Cupons"])
app.include_router(n8n.router, prefix="/api/n8n", tags=["N8N"])
app.include_router(pdv.router, prefix="/api")
# app.include_router(financeiro.router, prefix="/api")  # Temporariamente comentado devido a problemas com numpy/openpyxl
app.include_router(gamificacao.router, prefix="/api")
app.include_router(produtos_final.router, prefix="/api", tags=["Produtos"])  # Vers√£o final para produ√ß√£o
# app.include_router(import_export.router, tags=["Import-Export"])  # Temporariamente comentado devido a problemas com Pydantic
# app.include_router(meep.router, prefix="/api/meep", tags=["MEEP Integration"])

# üîå WEBSOCKETS COM CORS
@app.websocket("/api/pdv/ws/{evento_id}")
async def websocket_pdv_endpoint(websocket: WebSocket, evento_id: int):
    """WebSocket para PDV com verifica√ß√£o de origem"""
    # Verificar origem do WebSocket se necess√°rio
    origin = websocket.headers.get("origin")
    logger.info(f"WebSocket connection from origin: {origin}")
    
    await manager.connect(websocket, evento_id)
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"pong: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket, evento_id)

@app.websocket("/api/checkin/ws/{evento_id}")
async def websocket_checkin_endpoint(websocket: WebSocket, evento_id: int):
    """WebSocket para Check-in com verifica√ß√£o de origem"""
    origin = websocket.headers.get("origin")
    logger.info(f"WebSocket checkin connection from origin: {origin}")
    
    await manager.connect(websocket, evento_id)
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"checkin-pong: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket, evento_id)

# ü©∫ ENDPOINTS DE MONITORAMENTO
@app.get("/healthz")
async def healthz():
    """Health check com informa√ß√µes CORS"""
    return JSONResponse(
        content={
            "status": "ok",
            "service": "Sistema de Gest√£o de Eventos",
            "version": "1.0.0",
            "timestamp": datetime.now().isoformat(),
            "environment": "production" if os.getenv("RAILWAY_ENVIRONMENT") else "development",
            "cors_status": "ultimate_protection_enabled",
            "cors_layers": ["custom_middleware", "fastapi_cors_middleware"],
            "railway": bool(os.getenv("RAILWAY_ENVIRONMENT"))
        },
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Headers": "*"
        }
    )

@app.get("/api/health")
async def api_health(request: Request):
    """Health check da API com teste CORS completo"""
    origin = request.headers.get("origin", "unknown")
    user_agent = request.headers.get("user-agent", "unknown")
    
    return JSONResponse(
        content={
            "status": "healthy",
            "api": "Sistema Universal API",
            "version": "1.0.0",
            "cors_protection": "ultimate",
            "request_info": {
                "origin": origin,
                "user_agent": user_agent,
                "timestamp": datetime.now().isoformat()
            },
            "environment": {
                "railway": bool(os.getenv("RAILWAY_ENVIRONMENT")),
                "cors_ultra_permissive": os.getenv("CORS_ULTRA_PERMISSIVE", "false"),
                "production": bool(os.getenv("RAILWAY_ENVIRONMENT"))
            }
        }
    )

# üß™ ENDPOINT DE TESTE CORS AVAN√áADO
@app.api_route("/api/cors-test", methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"])
async def cors_advanced_test(request: Request):
    """Endpoint para teste completo de CORS com todas as informa√ß√µes"""
    method = request.method
    origin = request.headers.get("origin", "no-origin")
    user_agent = request.headers.get("user-agent", "no-user-agent")
    
    # Headers da requisi√ß√£o
    headers_info = dict(request.headers)
    
    # Informa√ß√µes do ambiente
    env_info = {
        "railway_environment": os.getenv("RAILWAY_ENVIRONMENT"),
        "cors_ultra_permissive": os.getenv("CORS_ULTRA_PERMISSIVE", "false"),
        "python_version": os.sys.version,
        "server_time": datetime.now().isoformat()
    }
    
    response_data = {
        "success": True,
        "message": "CORS Ultimate Protection - All Tests Passed",
        "request": {
            "method": method,
            "origin": origin,
            "user_agent": user_agent,
            "path": str(request.url.path),
            "query_params": str(request.query_params),
            "headers_count": len(headers_info)
        },
        "cors_info": {
            "middleware": "UltimateCORSMiddleware + FastAPI CORSMiddleware",
            "protection_level": "maximum",
            "allowed_methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"],
            "wildcard_enabled": True,
            "credentials_support": "dynamic"
        },
        "environment": env_info,
        "timestamp": datetime.now().isoformat()
    }
    
    return JSONResponse(content=response_data)

# üéØ CATCH-ALL PARA OPTIONS
@app.options("/{full_path:path}")
async def options_catch_all(request: Request, full_path: str):
    """Catch-all para requisi√ß√µes OPTIONS n√£o capturadas"""
    origin = request.headers.get("origin", "*")
    requested_method = request.headers.get("access-control-request-method", "")
    requested_headers = request.headers.get("access-control-request-headers", "")
    
    logger.info(f"OPTIONS catch-all: /{full_path} | Origin: {origin} | Method: {requested_method}")
    
    return JSONResponse(
        content={"message": "OPTIONS handled by catch-all"},
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "false",
            "Access-Control-Max-Age": "86400"
        }
    )

# üèóÔ∏è SETUP INICIAL
@app.post("/setup-inicial")
async def setup_inicial_temp(db: Session = Depends(get_db)):
    from .models import Empresa, Usuario, TipoUsuario
    from .auth import gerar_hash_senha
    
    try:
        # Verificar se j√° existe empresa
        empresa_existente = db.query(Empresa).first()
        if empresa_existente:
            return JSONResponse(
                content={"message": "Sistema j√° foi inicializado", "empresa": empresa_existente.nome},
                headers={"Access-Control-Allow-Origin": "*"}
            )
        
        # Criar empresa
        empresa = Empresa(
            nome="Painel Universal - Empresa Demo",
            cnpj="00000000000100",
            email="contato@paineluniversal.com",
            telefone="(11) 99999-9999",
            endereco="Endere√ßo da empresa demo"
        )
        db.add(empresa)
        db.commit()
        db.refresh(empresa)
        
        # Criar usu√°rio admin
        admin = Usuario(
            cpf="00000000000",
            nome="Administrador Sistema",
            email="admin@paineluniversal.com",
            telefone="(11) 99999-0000",
            senha_hash=gerar_hash_senha("admin123"),
            tipo=TipoUsuario.ADMIN
        )
        db.add(admin)
        
        # Criar usu√°rio promoter
        promoter = Usuario(
            cpf="11111111111",
            nome="Promoter Demo",
            email="promoter@paineluniversal.com",
            telefone="(11) 99999-1111",
            senha_hash=gerar_hash_senha("promoter123"),
            tipo=TipoUsuario.PROMOTER
        )
        db.add(promoter)
        
        db.commit()
        
        return JSONResponse(
            content={
                "message": "Sistema inicializado com sucesso!",
                "empresa": empresa.nome,
                "usuarios_criados": [
                    {"cpf": "00000000000", "nome": admin.nome, "tipo": "admin", "senha": "admin123"},
                    {"cpf": "11111111111", "nome": promoter.nome, "tipo": "promoter", "senha": "promoter123"}
                ]
            },
            headers={"Access-Control-Allow-Origin": "*"}
        )
        
    except Exception as e:
        db.rollback()
        error_response = JSONResponse(
            status_code=500,
            content={"detail": f"Erro ao inicializar sistema: {str(e)}"},
            headers={"Access-Control-Allow-Origin": "*"}
        )
        return error_response

# üè† ROOT ENDPOINT
@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes do sistema"""
    return JSONResponse(
        content={
            "service": "Sistema de Gest√£o de Eventos",
            "version": "1.0.0",
            "status": "operational",
            "documentation": "/docs",
            "api_health": "/api/health",
            "cors_test": "/api/cors-test",
            "features": ["CORS Ultimate Protection", "WebSocket Support", "PWA Ready"],
            "timestamp": datetime.now().isoformat()
        },
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Headers": "*"
        }
    )

# üö® HANDLER DE EXCE√á√ïES GLOBAL COM CORS
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Handler global de exce√ß√µes com headers CORS"""
    logger.error(f"Global exception: {str(exc)}")
    logger.error(f"Traceback: {traceback.format_exc()}")
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": str(exc) if not os.getenv("RAILWAY_ENVIRONMENT") else "An error occurred",
            "timestamp": datetime.now().isoformat()
        },
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "false"
        }
    )

# üö® HANDLER PARA ERROS DE VALIDA√á√ÉO (PYDANTIC) COM CORS
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Handler para erros de valida√ß√£o Pydantic com CORS e detalhes"""
    logger.error(f"VALIDATION ERROR: {str(exc)}")
    logger.error(f"Request URL: {request.url}")
    logger.error(f"Request method: {request.method}")
    logger.error(f"Request headers: {dict(request.headers)}")
    
    # Capturar corpo da requisi√ß√£o para debug
    try:
        body = await request.body()
        logger.error(f"Request body: {body.decode('utf-8')}")
    except Exception as body_error:
        logger.error(f"Could not read request body: {body_error}")
    
    # Processar erros de valida√ß√£o
    errors_detail = []
    for error in exc.errors():
        field = " -> ".join(str(loc) for loc in error["loc"])
        message = error["msg"]
        error_type = error["type"]
        errors_detail.append(f"{field}: {message} (tipo: {error_type})")
    
    return JSONResponse(
        status_code=422,
        content={
            "error": "Validation Error", 
            "message": "Dados inv√°lidos enviados na requisi√ß√£o",
            "details": errors_detail,
            "raw_errors": exc.errors(),
            "timestamp": datetime.now().isoformat()
        },
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*", 
            "Access-Control-Allow-Headers": "*",
            "Access-Control-Allow-Credentials": "false"
        }
    )

@app.exception_handler(ValidationError)
async def pydantic_validation_exception_handler(request: Request, exc: ValidationError):
    """Handler para erros de valida√ß√£o diretos do Pydantic"""
    logger.error(f"PYDANTIC VALIDATION ERROR: {str(exc)}")
    logger.error(f"Request URL: {request.url}")
    
    return JSONResponse(
        status_code=422,
        content={
            "error": "Pydantic Validation Error",
            "message": "Erro de valida√ß√£o nos dados",
            "details": exc.errors(),
            "timestamp": datetime.now().isoformat()
        },
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Headers": "*"
        }
    )

# üö® HANDLER PARA 404 COM CORS
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """Handler para 404 com CORS"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "Not Found",
            "message": "The requested resource was not found",
            "path": str(request.url.path),
            "timestamp": datetime.now().isoformat()
        },
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "*",
            "Access-Control-Allow-Headers": "*"
        }
    )
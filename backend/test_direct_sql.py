#!/usr/bin/env python3
"""
Teste de inser√ß√£o direta SQL para diagnosticar problema de timeout
"""
import sqlite3
import hashlib
from datetime import datetime
import time

def test_direct_sql_insert():
    print("üß™ TESTE: Inser√ß√£o SQL direta")
    print("=" * 40)
    
    try:
        print("1Ô∏è‚É£ Conectando ao banco...")
        conn = sqlite3.connect('app.db', timeout=10.0)
        cursor = conn.cursor()
        
        print("2Ô∏è‚É£ Verificando schema...")
        cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='usuarios'")
        schema = cursor.fetchone()
        if schema:
            print("üìã Schema encontrado:")
            print(schema[0])
        else:
            print("‚ùå Tabela usuarios n√£o encontrada!")
            return
        
        print("\n3Ô∏è‚É£ Verificando usu√°rios existentes...")
        cursor.execute("SELECT COUNT(*) FROM usuarios")
        count = cursor.fetchone()[0]
        print(f"üìä {count} usu√°rios existentes")
        
        print("\n4Ô∏è‚É£ Preparando inser√ß√£o de teste...")
        test_cpf = "12345678901"
        test_email = f"teste_direto_{int(time.time())}@teste.com"
        senha_hash = hashlib.md5(b"123456").hexdigest()
        
        # Verificar se CPF j√° existe
        cursor.execute("SELECT id FROM usuarios WHERE cpf = ?", (test_cpf,))
        if cursor.fetchone():
            print(f"üîÑ CPF {test_cpf} j√° existe, usando CPF √∫nico...")
            test_cpf = f"999{int(time.time())}"[-11:]  # CPF √∫nico baseado em timestamp
        
        print(f"üìß Email: {test_email}")
        print(f"üì± CPF: {test_cpf}")
        
        print("\n5Ô∏è‚É£ Executando inser√ß√£o...")
        start_time = time.time()
        
        cursor.execute("""
        INSERT INTO usuarios (nome, email, cpf, telefone, senha_hash, tipo, ativo, data_criacao)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            "Teste Direto SQL",
            test_email,
            test_cpf,
            "11999999999",
            senha_hash,
            "cliente",
            1,  # ativo = True
            datetime.utcnow().isoformat()
        ))
        
        conn.commit()
        end_time = time.time()
        
        user_id = cursor.lastrowid
        print(f"‚úÖ Usu√°rio criado com sucesso!")
        print(f"üÜî ID: {user_id}")
        print(f"‚è±Ô∏è Tempo: {end_time - start_time:.2f}s")
        
        print("\n6Ô∏è‚É£ Verificando inser√ß√£o...")
        cursor.execute("SELECT id, nome, email FROM usuarios WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        if user:
            print(f"‚úÖ Verificado: {user}")
        else:
            print("‚ùå Usu√°rio n√£o encontrado ap√≥s inser√ß√£o!")
        
    except sqlite3.Error as e:
        print(f"‚ùå Erro SQLite: {e}")
        print(f"‚ùå Tipo: {type(e).__name__}")
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        print(f"‚ùå Tipo: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        
    finally:
        try:
            conn.close()
            print("üîö Conex√£o fechada")
        except:
            pass

if __name__ == "__main__":
    test_direct_sql_insert()

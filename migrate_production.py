#!/usr/bin/env python3

"""
Script de migra√ß√£o segura para produ√ß√£o
Aplica corre√ß√µes de forma incremental e revers√≠vel
Suporta SQLite (local) e PostgreSQL (produ√ß√£o)
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def backup_database_sqlite(db_path):
    """Criar backup do banco SQLite"""
    print(f"üíæ Criando backup do banco SQLite {db_path}...")
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f"{db_path}.backup_{timestamp}"
        
        import shutil
        shutil.copy2(db_path, backup_path)
        
        print(f"‚úÖ Backup SQLite criado: {backup_path}")
        return backup_path
    except Exception as e:
        print(f"‚ùå Erro no backup SQLite: {e}")
        return None

def check_table_exists_sqlite(cursor, table_name):
    """Verificar se tabela existe no SQLite"""
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
    return cursor.fetchone() is not None

def check_table_exists_postgres(cursor, table_name):
    """Verificar se tabela existe no PostgreSQL"""
    cursor.execute("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = %s)", (table_name,))
    return cursor.fetchone()[0]

def apply_safe_migration_sqlite(db_path):
    """Aplicar migra√ß√£o segura no SQLite"""
    print(f"üîß Aplicando migra√ß√£o segura SQLite em {db_path}...")
    
    # Criar backup primeiro
    backup_path = backup_database_sqlite(db_path)
    if not backup_path:
        print("‚ùå N√£o foi poss√≠vel criar backup. Abortando migra√ß√£o.")
        return False
    
    try:
        import sqlite3
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç Verificando estrutura atual SQLite...")
        
        # Verificar tabelas cr√≠ticas
        critical_tables = ["usuarios", "eventos", "produtos"]
        for table in critical_tables:
            if check_table_exists_sqlite(cursor, table):
                print(f"‚úÖ Tabela {table} j√° existe")
            else:
                print(f"‚ö†Ô∏è Tabela {table} n√£o existe - ser√° criada")
        
        # Criar todas as tabelas usando SQLAlchemy
        print("üèóÔ∏è Criando/atualizando tabelas com SQLAlchemy...")
        from app.models import Base
        from app.database import engine
        
        Base.metadata.create_all(bind=engine, checkfirst=True)
        print("‚úÖ Tabelas SQLite criadas/atualizadas com sucesso")
        
        # Verificar integridade
        cursor.execute("PRAGMA integrity_check")
        integrity = cursor.fetchone()[0]
        
        conn.close()
        
        if integrity == "ok":
            print("‚úÖ Integridade do banco SQLite verificada")
            return True
        else:
            print(f"‚ùå Problema de integridade SQLite: {integrity}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o SQLite: {e}")
        
        # Restaurar backup
        try:
            import shutil
            shutil.copy2(backup_path, db_path)
            print("‚úÖ Backup SQLite restaurado")
        except Exception as restore_error:
            print(f"‚ùå Erro ao restaurar backup SQLite: {restore_error}")
        
        return False

def apply_safe_migration_postgres():
    """Aplicar migra√ß√£o segura no PostgreSQL de produ√ß√£o"""
    print("üîß Aplicando migra√ß√£o segura PostgreSQL...")
    
    try:
        # Importar configura√ß√£o do banco
        from app.database import engine
        
        # Verificar se √© PostgreSQL
        if 'postgresql' not in str(engine.url):
            print("‚ö†Ô∏è N√£o √© PostgreSQL, pulando migra√ß√£o PostgreSQL")
            return True
        
        print("üîç Verificando estrutura PostgreSQL...")
        
        # Usar SQLAlchemy para migra√ß√£o segura
        from app.models import Base
        
        print("üèóÔ∏è Criando/atualizando tabelas PostgreSQL com SQLAlchemy...")
        Base.metadata.create_all(bind=engine, checkfirst=True)
        print("‚úÖ Tabelas PostgreSQL criadas/atualizadas com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o PostgreSQL: {e}")
        return False

def validate_migration():
    """Validar se a migra√ß√£o foi bem-sucedida"""
    print("‚úÖ Validando migra√ß√£o...")
    
    try:
        from app.models import Usuario, Evento, Produto
        from app.database import SessionLocal
        
        db = SessionLocal()
        
        # Verificar tabelas cr√≠ticas
        critical_models = [
            ("usuarios", Usuario),
            ("eventos", Evento), 
            ("produtos", Produto)
        ]
        
        all_good = True
        
        for table_name, model in critical_models:
            try:
                count = db.query(model).count()
                print(f"‚úÖ {table_name}: {count} registros")
            except Exception as e:
                print(f"‚ùå Erro em {table_name}: {e}")
                all_good = False
        
        db.close()
        return all_good
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False
DATABASE_URL = "postgresql://postgres:CeGUGoTyinOaBRILNgPCApbJpcfcVETf@hopper.proxy.rlwy.net:57200/railway"

def apply_production_migration():
    """Aplica migra√ß√£o para tornar empresa_id nullable no PostgreSQL"""
    
    print("üêò Conectando ao PostgreSQL de produ√ß√£o...")
    
    try:
        # Conectar ao banco
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        print("‚úÖ Conectado ao banco PostgreSQL")
        
        # Lista de tabelas para migrar
        tables_to_migrate = [
            'eventos',
            'produtos', 
            'comandas',
            'vendas_pdv'
        ]
        
        print(f"üîß Aplicando migra√ß√£o em {len(tables_to_migrate)} tabelas...")
        
        for table in tables_to_migrate:
            try:
                print(f"   üîÑ Migrando {table}.empresa_id...")
                
                # Verificar se a coluna existe antes de alterar
                cur.execute("""
                    SELECT column_name, is_nullable 
                    FROM information_schema.columns 
                    WHERE table_name = %s AND column_name = 'empresa_id'
                """, (table,))
                
                result = cur.fetchone()
                
                if result:
                    column_name, is_nullable = result
                    print(f"   üìã {table}.empresa_id encontrada - nullable: {is_nullable}")
                    
                    if is_nullable == 'NO':
                        # Alterar para permitir NULL
                        sql = f"ALTER TABLE {table} ALTER COLUMN empresa_id DROP NOT NULL;"
                        cur.execute(sql)
                        print(f"   ‚úÖ {table}.empresa_id agora √© nullable")
                    else:
                        print(f"   ‚ö†Ô∏è {table}.empresa_id j√° √© nullable")
                else:
                    print(f"   ‚ö†Ô∏è {table}.empresa_id n√£o encontrada")
                    
            except Exception as e:
                print(f"   ‚ùå Erro em {table}: {e}")
                # Continuar com pr√≥xima tabela
                continue
        
        # Commit das altera√ß√µes
        conn.commit()
        print("‚úÖ Migra√ß√£o aplicada com sucesso!")
        
        # Verificar estrutura final
        print("\nüìä Verificando estrutura final...")
        for table in tables_to_migrate:
            try:
                cur.execute("""
                    SELECT column_name, data_type, is_nullable 
                    FROM information_schema.columns 
                    WHERE table_name = %s AND column_name = 'empresa_id'
                """, (table,))
                
                result = cur.fetchone()
                if result:
                    col_name, data_type, is_nullable = result
                    status = "‚úÖ NULL" if is_nullable == 'YES' else "‚ùå NOT NULL"
                    print(f"   {table}.empresa_id: {data_type} - {status}")
                    
            except Exception as e:
                print(f"   ‚ùå Erro verificando {table}: {e}")
        
    except Exception as e:
        print(f"üí• Erro na migra√ß√£o: {e}")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()
            print("üîí Conex√£o fechada")
    
    return True

def check_production_tables():
    """Verifica estrutura das tabelas em produ√ß√£o"""
    
    print("üîç Verificando estrutura das tabelas...")
    
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        # Listar todas as tabelas
        cur.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        tables = cur.fetchall()
        print(f"üìã Tabelas encontradas: {len(tables)}")
        
        for (table_name,) in tables:
            print(f"   - {table_name}")
        
        # Verificar especificamente a tabela eventos
        print("\nüé´ Estrutura da tabela eventos:")
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'eventos'
            ORDER BY ordinal_position
        """)
        
        columns = cur.fetchall()
        for col_name, data_type, is_nullable, col_default in columns:
            nullable_str = "NULL" if is_nullable == 'YES' else "NOT NULL"
            default_str = f" DEFAULT {col_default}" if col_default else ""
            print(f"   {col_name}: {data_type} {nullable_str}{default_str}")
            
    except Exception as e:
        print(f"üí• Erro na verifica√ß√£o: {e}")
    
    finally:
        if 'conn' in locals():
            conn.close()

def main_new():
    """Executar migra√ß√£o completa segura"""
    print("üöÄ MIGRA√á√ÉO SEGURA PARA PRODU√á√ÉO")
    print("=" * 50)
    print("üéØ Objetivo: Aplicar corre√ß√µes sem quebrar funcionalidades")
    print("=" * 50)
    
    success = True
    
    # 1. Migra√ß√£o local (SQLite)
    backend_dir = os.path.join(os.path.dirname(__file__), 'backend')
    db_path = os.path.join(backend_dir, 'eventos.db')
    
    if os.path.exists(db_path):
        print("\nüîß ETAPA 1: Migra√ß√£o Local (SQLite)")
        if not apply_safe_migration_sqlite(db_path):
            print("‚ùå Migra√ß√£o local falhou")
            success = False
    else:
        print(f"‚ö†Ô∏è Banco local n√£o encontrado: {db_path}")
    
    # 2. Migra√ß√£o produ√ß√£o (PostgreSQL)
    print("\nüîß ETAPA 2: Migra√ß√£o Produ√ß√£o (PostgreSQL)")
    if not apply_safe_migration_postgres():
        print("‚ùå Migra√ß√£o de produ√ß√£o falhou")
        success = False
    
    # 3. Valida√ß√£o final
    print("\nüîß ETAPA 3: Valida√ß√£o Final")
    if not validate_migration():
        print("‚ùå Valida√ß√£o falhou")
        success = False
    
    # Resultado final
    print("\n" + "=" * 50)
    if success:
        print("üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("‚úÖ Sistema seguro para produ√ß√£o")
        print("‚úÖ Todas as funcionalidades preservadas")
    else:
        print("‚ùå MIGRA√á√ÉO FALHOU")
        print("‚ùå Revisar erros antes de aplicar na produ√ß√£o")
    
    return success

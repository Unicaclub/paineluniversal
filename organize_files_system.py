#!/usr/bin/env python3
"""
üßπ SCRIPT DE ORGANIZA√á√ÉO DE ARQUIVOS - PAINELUNIVERSAL
Organiza os m√∫ltiplos scripts de migra√ß√£o em estrutura limpa
Preserva funcionalidades existentes
"""

import os
import shutil
import logging
from pathlib import Path
from datetime import datetime
from typing import List, Dict

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("file_organizer")

class FileOrganizer:
    """Organiza arquivos de migra√ß√£o em estrutura limpa"""
    
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
        self.backup_dir = self.base_path / "file_organization_backup"
        self.organized_dirs = {
            'migrations': self.base_path / 'migrations',
            'scripts': self.base_path / 'scripts', 
            'docs': self.base_path / 'docs',
            'tests': self.base_path / 'tests_migration'
        }
        
    def create_directory_structure(self):
        """Cria estrutura de diret√≥rios organizada"""
        logger.info("üìÅ Criando estrutura de diret√≥rios...")
        
        # Criar backup
        self.backup_dir.mkdir(exist_ok=True)
        
        # Estrutura principal
        directories = {
            'migrations/production': 'Scripts para produ√ß√£o PostgreSQL',
            'migrations/development': 'Scripts para desenvolvimento SQLite',
            'migrations/archive': 'Scripts antigos/conclu√≠dos',
            'scripts/deploy': 'Scripts de deploy autom√°tico',
            'scripts/maintenance': 'Scripts de manuten√ß√£o',
            'scripts/monitoring': 'Scripts de monitoramento',
            'tests_migration/unit': 'Testes unit√°rios de migra√ß√£o',
            'tests_migration/integration': 'Testes de integra√ß√£o',
            'docs/migration': 'Documenta√ß√£o de migra√ß√£o'
        }
        
        for dir_path, description in directories.items():
            full_path = self.base_path / dir_path
            full_path.mkdir(parents=True, exist_ok=True)
            
            # Criar README.md em cada diret√≥rio
            readme_path = full_path / "README.md"
            if not readme_path.exists():
                readme_content = f"# {dir_path.replace('/', ' - ').title()}\n\n{description}\n"
                readme_path.write_text(readme_content, encoding='utf-8')
        
        logger.info("‚úÖ Estrutura de diret√≥rios criada")
    
    def get_migration_files(self) -> Dict[str, List[Path]]:
        """Identifica e categoriza arquivos de migra√ß√£o"""
        
        categories = {
            'postgres_migration': [],
            'sqlite_migration': [],
            'enum_fixes': [],
            'deploy_scripts': [],
            'test_scripts': [],
            'documentation': [],
            'other_scripts': []
        }
        
        # Padr√µes de arquivos
        patterns = {
            'postgres_migration': [
                'migrate_postgres*.py', 'migrate_postgres*.sql', 
                'postgresql_migration.sql', 'migrate_production.py'
            ],
            'sqlite_migration': [
                'migrate_simple.py', 'migrate_debug.py', 
                'create_sqlite_db.py', '*sqlite*.py'
            ],
            'enum_fixes': [
                'fix_enum*.py', 'fix_enum*.sql', 
                'fix_tipousuario*.py', 'diagnose_enum*.py'
            ],
            'deploy_scripts': [
                'deploy*.sh', 'deploy*.ps1', 'start*.sh', 
                'run_*.py', 'apply_*.py'
            ],
            'test_scripts': [
                'test_*.py', 'test*.js', 'test*.html',
                'validate_*.py', 'diagnostic_*.py'
            ],
            'documentation': [
                '*.md', 'README*', 'RELATORIO_*', 
                'SOLUCAO_*', 'CORRECAO_*'
            ]
        }
        
        # Buscar arquivos no diret√≥rio raiz
        for file_path in self.base_path.glob('*'):
            if file_path.is_file():
                categorized = False
                
                for category, file_patterns in patterns.items():
                    for pattern in file_patterns:
                        if file_path.match(pattern):
                            categories[category].append(file_path)
                            categorized = True
                            break
                    if categorized:
                        break
                
                if not categorized:
                    # Arquivos Python gen√©ricos
                    if file_path.suffix == '.py':
                        categories['other_scripts'].append(file_path)
        
        return categories
    
    def move_files_to_organized_structure(self, categories: Dict[str, List[Path]]):
        """Move arquivos para estrutura organizada"""
        logger.info("üì¶ Organizando arquivos...")
        
        # Mapeamento de categorias para diret√≥rios
        category_mapping = {
            'postgres_migration': 'migrations/production',
            'sqlite_migration': 'migrations/development',
            'enum_fixes': 'migrations/production',
            'deploy_scripts': 'scripts/deploy',
            'test_scripts': 'tests_migration/integration',
            'documentation': 'docs/migration',
            'other_scripts': 'scripts/maintenance'
        }
        
        moved_files = []
        
        for category, files in categories.items():
            if not files:
                continue
                
            target_dir = self.base_path / category_mapping[category]
            
            logger.info(f"üìÅ Movendo {len(files)} arquivo(s) de {category}")
            
            for file_path in files:
                try:
                    # Backup do arquivo original
                    backup_path = self.backup_dir / file_path.name
                    shutil.copy2(file_path, backup_path)
                    
                    # Mover para diret√≥rio organizado
                    target_path = target_dir / file_path.name
                    
                    # Evitar sobrescrita
                    if target_path.exists():
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        target_path = target_dir / f"{file_path.stem}_{timestamp}{file_path.suffix}"
                    
                    shutil.move(str(file_path), str(target_path))
                    moved_files.append((file_path.name, target_path.relative_to(self.base_path)))
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao mover {file_path.name}: {e}")
        
        return moved_files
    
    def create_index_file(self, moved_files: List[tuple]):
        """Cria arquivo √≠ndice dos arquivos organizados"""
        
        index_content = f"""# üìÅ √çNDICE DE ARQUIVOS ORGANIZADOS
**Data**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìã Arquivos Movidos ({len(moved_files)} total)

"""
        
        # Agrupar por diret√≥rio
        by_directory = {}
        for original_name, new_path in moved_files:
            dir_name = str(new_path.parent)
            if dir_name not in by_directory:
                by_directory[dir_name] = []
            by_directory[dir_name].append((original_name, new_path.name))
        
        for directory, files in sorted(by_directory.items()):
            index_content += f"### üìÇ {directory}\n"
            for original_name, new_name in files:
                if original_name != new_name:
                    index_content += f"- `{original_name}` ‚Üí `{new_name}`\n"
                else:
                    index_content += f"- `{new_name}`\n"
            index_content += "\n"
        
        index_content += f"""
## üîÑ Restaura√ß√£o

Para restaurar a estrutura original:
```bash
# Os arquivos originais est√£o em:
{self.backup_dir.relative_to(self.base_path)}
```

## üìÅ Nova Estrutura

- `migrations/production/` - Scripts PostgreSQL para produ√ß√£o
- `migrations/development/` - Scripts SQLite para desenvolvimento
- `scripts/deploy/` - Scripts de deploy autom√°tico
- `scripts/maintenance/` - Scripts de manuten√ß√£o
- `tests_migration/` - Testes de migra√ß√£o
- `docs/migration/` - Documenta√ß√£o

## üõ°Ô∏è Garantias

- ‚úÖ Backup completo em `{self.backup_dir.relative_to(self.base_path)}`
- ‚úÖ Nenhum arquivo perdido
- ‚úÖ Estrutura revers√≠vel
- ‚úÖ Funcionalidades preservadas
"""
        
        index_path = self.base_path / "ARQUIVO_ORGANIZACAO_INDEX.md"
        index_path.write_text(index_content, encoding='utf-8')
        
        logger.info(f"üìã √çndice criado: {index_path.name}")
    
    def organize_files(self):
        """Executa organiza√ß√£o completa dos arquivos"""
        logger.info("üßπ Iniciando organiza√ß√£o de arquivos...")
        
        try:
            # 1. Criar estrutura
            self.create_directory_structure()
            
            # 2. Identificar arquivos
            categories = self.get_migration_files()
            
            total_files = sum(len(files) for files in categories.values())
            logger.info(f"üìä Encontrados {total_files} arquivos para organizar")
            
            # 3. Mover arquivos
            moved_files = self.move_files_to_organized_structure(categories)
            
            # 4. Criar √≠ndice
            self.create_index_file(moved_files)
            
            logger.info(f"‚úÖ Organiza√ß√£o conclu√≠da: {len(moved_files)} arquivos movidos")
            logger.info(f"üíæ Backup dispon√≠vel em: {self.backup_dir.relative_to(self.base_path)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na organiza√ß√£o: {e}")
            return False

def main():
    """Executa organiza√ß√£o de arquivos"""
    print("üßπ ORGANIZADOR DE ARQUIVOS - PAINELUNIVERSAL")
    print("=" * 50)
    
    base_path = Path(__file__).parent
    organizer = FileOrganizer(str(base_path))
    
    # Confirmar com usu√°rio
    print(f"üìÅ Diret√≥rio base: {base_path}")
    print("üîç Esta opera√ß√£o ir√°:")
    print("  - Criar estrutura organizada de diret√≥rios")
    print("  - Mover arquivos de migra√ß√£o para locais apropriados")
    print("  - Criar backup completo dos arquivos originais")
    print("  - Gerar √≠ndice de arquivos organizados")
    
    confirm = input("\n‚ùì Continuar com a organiza√ß√£o? (s/N): ").lower().strip()
    
    if confirm in ['s', 'sim', 'yes', 'y']:
        success = organizer.organize_files()
        
        if success:
            print("‚úÖ ORGANIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("üìã Verifique ARQUIVO_ORGANIZACAO_INDEX.md para detalhes")
            return 0
        else:
            print("‚ùå ERRO NA ORGANIZA√á√ÉO")
            return 1
    else:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return 1

if __name__ == "__main__":
    exit(main())

#!/usr/bin/env python3
"""
MIGRA√á√ÉO POSTGRESQL: Remover coluna tipo_usuario da tabela usuarios

üéØ OBJETIVO: Finalizar migra√ß√£o removendo coluna redundante do PostgreSQL de produ√ß√£o
- O c√≥digo j√° foi atualizado para usar apenas 'tipo'
- Agora precisa remover a coluna 'tipo_usuario' do banco PostgreSQL

‚ö†Ô∏è ATEN√á√ÉO: Execute apenas ap√≥s confirmar que o c√≥digo est√° funcionando
"""

import os
import sys
import logging
from datetime import datetime
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.exc import SQLAlchemyError

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PostgreSQLTipoUsuarioMigration:
    def __init__(self):
        self.database_url = os.getenv("DATABASE_URL")
        
        if not self.database_url:
            logger.error("‚ùå DATABASE_URL n√£o encontrada nas vari√°veis de ambiente")
            raise ValueError("DATABASE_URL √© obrigat√≥ria para migra√ß√£o PostgreSQL")
        
        # Converter postgres:// para postgresql:// se necess√°rio
        if self.database_url.startswith("postgres://"):
            self.database_url = self.database_url.replace("postgres://", "postgresql://", 1)
        
        self.engine = create_engine(self.database_url, pool_pre_ping=True, pool_recycle=300)

    def diagnose_postgresql_state(self):
        """Diagnosticar estado atual do PostgreSQL"""
        logger.info("üîç Diagnosticando estado do PostgreSQL...")
        
        try:
            with self.engine.connect() as conn:
                # Verificar se tabela usuarios existe
                inspector = inspect(self.engine)
                tables = inspector.get_table_names()
                
                if 'usuarios' not in tables:
                    logger.error("‚ùå Tabela 'usuarios' n√£o encontrada")
                    return False
                
                # Verificar colunas da tabela usuarios
                columns = inspector.get_columns('usuarios')
                column_names = [col['name'] for col in columns]
                
                has_tipo = 'tipo' in column_names
                has_tipo_usuario = 'tipo_usuario' in column_names
                
                logger.info(f"üìä Coluna 'tipo' existe: {has_tipo}")
                logger.info(f"üìä Coluna 'tipo_usuario' existe: {has_tipo_usuario}")
                
                if not has_tipo:
                    logger.error("‚ùå Coluna 'tipo' n√£o encontrada - migra√ß√£o imposs√≠vel")
                    return False
                
                if not has_tipo_usuario:
                    logger.info("‚úÖ Coluna 'tipo_usuario' j√° foi removida - migra√ß√£o desnecess√°ria")
                    return "already_migrated"
                
                # Verificar inconsist√™ncias de dados
                result = conn.execute(text("""
                    SELECT 
                        COUNT(*) as total,
                        SUM(CASE WHEN tipo != tipo_usuario THEN 1 ELSE 0 END) as inconsistentes,
                        SUM(CASE WHEN tipo IS NULL THEN 1 ELSE 0 END) as tipo_null,
                        SUM(CASE WHEN tipo_usuario IS NULL THEN 1 ELSE 0 END) as tipo_usuario_null
                    FROM usuarios
                """))
                
                stats = result.fetchone()
                logger.info(f"üìä Total de usu√°rios: {stats.total}")
                logger.info(f"‚ö†Ô∏è Registros inconsistentes (tipo != tipo_usuario): {stats.inconsistentes}")
                logger.info(f"‚ùå Registros com tipo NULL: {stats.tipo_null}")
                logger.info(f"‚ùå Registros com tipo_usuario NULL: {stats.tipo_usuario_null}")
                
                # Verificar distribui√ß√£o de tipos
                result = conn.execute(text("""
                    SELECT tipo, COUNT(*) as count
                    FROM usuarios 
                    GROUP BY tipo 
                    ORDER BY count DESC
                """))
                
                logger.info("üìä Distribui√ß√£o de tipos:")
                for row in result.fetchall():
                    logger.info(f"   {row.tipo}: {row.count} usu√°rios")
                
                # Se h√° inconsist√™ncias, mostrar exemplos
                if stats.inconsistentes > 0:
                    result = conn.execute(text("""
                        SELECT id, nome, email, tipo, tipo_usuario 
                        FROM usuarios 
                        WHERE tipo != tipo_usuario 
                        LIMIT 5
                    """))
                    
                    logger.warning("üîç Exemplos de inconsist√™ncias encontradas:")
                    for row in result.fetchall():
                        logger.warning(f"   ID {row.id}: {row.nome} - tipo='{row.tipo}' vs tipo_usuario='{row.tipo_usuario}'")
                
                return {
                    "total": stats.total,
                    "inconsistentes": stats.inconsistentes,
                    "tipo_null": stats.tipo_null,
                    "tipo_usuario_null": stats.tipo_usuario_null
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro no diagn√≥stico: {e}")
            return False

    def sync_data_before_removal(self):
        """Sincronizar dados antes de remover coluna"""
        logger.info("üîß Sincronizando dados antes da remo√ß√£o...")
        
        try:
            with self.engine.begin() as trans:
                conn = trans.connection
                
                # Estrat√©gia 1: Sincronizar tipo = tipo_usuario onde h√° diferen√ßa
                logger.info("1Ô∏è‚É£ Sincronizando tipo = tipo_usuario...")
                result = conn.execute(text("""
                    UPDATE usuarios 
                    SET tipo = tipo_usuario 
                    WHERE tipo != tipo_usuario OR tipo IS NULL
                """))
                sync_count = result.rowcount
                logger.info(f"‚úÖ {sync_count} registros sincronizados")
                
                # Estrat√©gia 2: Corrigir valores NULL em tipo
                logger.info("2Ô∏è‚É£ Corrigindo valores NULL...")
                result = conn.execute(text("""
                    UPDATE usuarios 
                    SET tipo = 'cliente' 
                    WHERE tipo IS NULL
                """))
                null_fixes = result.rowcount
                logger.info(f"‚úÖ {null_fixes} registros com tipo NULL corrigidos")
                
                # Estrat√©gia 3: Normalizar valores (lowercase, trim)
                logger.info("3Ô∏è‚É£ Normalizando valores...")
                result = conn.execute(text("""
                    UPDATE usuarios 
                    SET tipo = LOWER(TRIM(tipo))
                    WHERE tipo IS NOT NULL
                """))
                normalized = result.rowcount
                logger.info(f"‚úÖ {normalized} registros normalizados")
                
                # Valida√ß√£o final
                result = conn.execute(text("""
                    SELECT COUNT(*) 
                    FROM usuarios 
                    WHERE tipo IS NULL OR tipo NOT IN ('admin', 'promoter', 'cliente')
                """))
                invalid_count = result.scalar()
                
                if invalid_count > 0:
                    logger.warning(f"‚ö†Ô∏è {invalid_count} registros ainda t√™m valores inv√°lidos")
                    
                    # Mostrar valores inv√°lidos
                    result = conn.execute(text("""
                        SELECT DISTINCT tipo, COUNT(*) 
                        FROM usuarios 
                        WHERE tipo NOT IN ('admin', 'promoter', 'cliente')
                        GROUP BY tipo
                    """))
                    
                    for row in result.fetchall():
                        logger.warning(f"   Valor inv√°lido: '{row.tipo}' ({row.count} usu√°rios)")
                    
                    # Corrigir valores inv√°lidos para 'cliente'
                    result = conn.execute(text("""
                        UPDATE usuarios 
                        SET tipo = 'cliente' 
                        WHERE tipo NOT IN ('admin', 'promoter', 'cliente')
                    """))
                    fixed_invalid = result.rowcount
                    logger.info(f"‚úÖ {fixed_invalid} valores inv√°lidos corrigidos para 'cliente'")
                
                logger.info("‚úÖ Sincroniza√ß√£o de dados conclu√≠da")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro na sincroniza√ß√£o: {e}")
            return False

    def create_postgresql_backup(self):
        """Criar backup da tabela usuarios antes da migra√ß√£o"""
        logger.info("üíæ Criando backup da tabela usuarios...")
        
        try:
            with self.engine.begin() as trans:
                conn = trans.connection
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_table = f"usuarios_backup_tipo_usuario_{timestamp}"
                
                # Criar tabela de backup
                conn.execute(text(f"""
                    CREATE TABLE {backup_table} AS 
                    SELECT * FROM usuarios
                """))
                
                # Verificar backup
                result = conn.execute(text(f"SELECT COUNT(*) FROM {backup_table}"))
                backup_count = result.scalar()
                
                logger.info(f"‚úÖ Backup criado: {backup_table} ({backup_count} registros)")
                return backup_table
                
        except Exception as e:
            logger.error(f"‚ùå Erro no backup: {e}")
            return None

    def remove_tipo_usuario_column(self):
        """Remover a coluna tipo_usuario da tabela usuarios"""
        logger.info("üóëÔ∏è Removendo coluna tipo_usuario...")
        
        try:
            with self.engine.begin() as trans:
                conn = trans.connection
                
                # PostgreSQL suporta DROP COLUMN diretamente
                conn.execute(text("ALTER TABLE usuarios DROP COLUMN tipo_usuario"))
                
                logger.info("‚úÖ Coluna tipo_usuario removida com sucesso")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao remover coluna: {e}")
            return False

    def validate_postgresql_migration(self):
        """Validar que a migra√ß√£o PostgreSQL foi bem-sucedida"""
        logger.info("‚úÖ Validando migra√ß√£o PostgreSQL...")
        
        try:
            with self.engine.connect() as conn:
                # Verificar se coluna foi removida
                inspector = inspect(self.engine)
                columns = inspector.get_columns('usuarios')
                column_names = [col['name'] for col in columns]
                
                if 'tipo_usuario' in column_names:
                    logger.error("‚ùå Coluna tipo_usuario ainda existe")
                    return False
                
                if 'tipo' not in column_names:
                    logger.error("‚ùå Coluna tipo n√£o existe")
                    return False
                
                logger.info("‚úÖ Estrutura da tabela correta")
                
                # Verificar integridade dos dados
                result = conn.execute(text("""
                    SELECT 
                        COUNT(*) as total,
                        COUNT(CASE WHEN tipo = 'admin' THEN 1 END) as admins,
                        COUNT(CASE WHEN tipo = 'promoter' THEN 1 END) as promoters,
                        COUNT(CASE WHEN tipo = 'cliente' THEN 1 END) as clientes,
                        COUNT(CASE WHEN tipo IS NULL THEN 1 END) as nulls
                    FROM usuarios
                """))
                
                stats = result.fetchone()
                logger.info(f"üìä Valida√ß√£o de dados:")
                logger.info(f"   Total: {stats.total}")
                logger.info(f"   Admins: {stats.admins}")
                logger.info(f"   Promoters: {stats.promoters}")
                logger.info(f"   Clientes: {stats.clientes}")
                logger.info(f"   NULLs: {stats.nulls}")
                
                if stats.nulls > 0:
                    logger.error(f"‚ùå {stats.nulls} registros com tipo NULL")
                    return False
                
                # Testar consulta t√≠pica de autentica√ß√£o
                result = conn.execute(text("""
                    SELECT id, nome, email, tipo 
                    FROM usuarios 
                    WHERE tipo = 'admin' 
                    LIMIT 1
                """))
                
                admin_user = result.fetchone()
                if admin_user:
                    logger.info(f"‚úÖ Consulta de autentica√ß√£o funcionando: Admin {admin_user.nome} encontrado")
                else:
                    logger.warning("‚ö†Ô∏è Nenhum usu√°rio admin encontrado")
                
                logger.info("‚úÖ Valida√ß√£o PostgreSQL conclu√≠da com sucesso")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o: {e}")
            return False

    def run_postgresql_migration(self):
        """Executar migra√ß√£o completa do PostgreSQL"""
        logger.info("üöÄ INICIANDO MIGRA√á√ÉO POSTGRESQL")
        logger.info("=" * 60)
        logger.info("üéØ Removendo coluna tipo_usuario da tabela usuarios")
        logger.info("=" * 60)
        
        # 1. Diagn√≥stico
        diagnosis = self.diagnose_postgresql_state()
        if diagnosis == "already_migrated":
            logger.info("‚úÖ Migra√ß√£o PostgreSQL j√° foi aplicada")
            return True
        elif not diagnosis:
            logger.error("‚ùå Diagn√≥stico falhou - abortando")
            return False
        
        # 2. Criar backup
        backup_table = self.create_postgresql_backup()
        if not backup_table:
            logger.error("‚ùå Falha no backup - abortando migra√ß√£o")
            return False
        
        # 3. Sincronizar dados
        if not self.sync_data_before_removal():
            logger.error("‚ùå Falha na sincroniza√ß√£o - abortando")
            return False
        
        # 4. Remover coluna
        if not self.remove_tipo_usuario_column():
            logger.error("‚ùå Falha na remo√ß√£o da coluna")
            return False
        
        # 5. Validar
        if not self.validate_postgresql_migration():
            logger.error("‚ùå Valida√ß√£o falhou")
            return False
        
        logger.info("\n" + "=" * 60)
        logger.info("üéâ MIGRA√á√ÉO POSTGRESQL CONCLU√çDA!")
        logger.info("‚úÖ Coluna tipo_usuario removida do PostgreSQL")
        logger.info("‚úÖ Dados validados e √≠ntegros")
        logger.info("‚úÖ Sistema funcionando apenas com campo 'tipo'")
        logger.info(f"üíæ Backup dispon√≠vel: {backup_table}")
        logger.info("=" * 60)
        
        return True

def main():
    """Ponto de entrada principal"""
    try:
        migration = PostgreSQLTipoUsuarioMigration()
        success = migration.run_postgresql_migration()
        return success
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

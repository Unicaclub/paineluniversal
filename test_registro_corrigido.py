#!/usr/bin/env python3
"""
Teste espec√≠fico para validar as corre√ß√µes no registro de usu√°rios
Testa o endpoint /api/auth/register com os problemas corrigidos
"""

import requests
import json
import time
import random
import string

# Configura√ß√µes
API_BASE = "http://localhost:8000"
REGISTER_ENDPOINT = f"{API_BASE}/api/auth/register"

def generate_test_cpf():
    """Gera um CPF v√°lido para teste"""
    # Gerar 9 primeiros d√≠gitos
    cpf = [random.randint(0, 9) for _ in range(9)]
    
    # Calcular primeiro d√≠gito verificador
    soma = sum(cpf[i] * (10 - i) for i in range(9))
    resto = soma % 11
    cpf.append(0 if resto < 2 else 11 - resto)
    
    # Calcular segundo d√≠gito verificador
    soma = sum(cpf[i] * (11 - i) for i in range(10))
    resto = soma % 11
    cpf.append(0 if resto < 2 else 11 - resto)
    
    return ''.join(map(str, cpf))

def test_user_registration():
    """Testa o registro de usu√°rio com as corre√ß√µes aplicadas"""
    print("üß™ TESTE DE REGISTRO DE USU√ÅRIO - P√ìS CORRE√á√ïES")
    print("=" * 60)
    
    # Gerar dados de teste √∫nicos
    cpf = generate_test_cpf()
    timestamp = int(time.time())
    
    user_data = {
        "cpf": cpf,
        "nome": f"Usu√°rio Teste {timestamp}",
        "email": f"teste{timestamp}@email.com",
        "telefone": "11999887766",
        "senha": "teste123",
        "tipo": "cliente"  # Enviando como string, deve ser convertido para enum no backend
    }
    
    print(f"üìã Dados do teste:")
    print(f"   CPF: {cpf}")
    print(f"   Nome: {user_data['nome']}")
    print(f"   Email: {user_data['email']}")
    print(f"   Tipo: {user_data['tipo']}")
    print()
    
    try:
        print("‚è±Ô∏è Enviando requisi√ß√£o de registro...")
        start_time = time.time()
        
        response = requests.post(
            REGISTER_ENDPOINT,
            json=user_data,
            timeout=30,  # Timeout menor para teste
            headers={
                "Content-Type": "application/json"
            }
        )
        
        duration = time.time() - start_time
        print(f"‚è±Ô∏è Requisi√ß√£o conclu√≠da em {duration:.2f}s")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ REGISTRO REALIZADO COM SUCESSO!")
            print(f"üìä Dados retornados:")
            print(f"   ID: {result.get('id')}")
            print(f"   Nome: {result.get('nome')}")
            print(f"   Email: {result.get('email')}")
            print(f"   CPF: {result.get('cpf')}")
            print(f"   Tipo: {result.get('tipo')}")
            print(f"   Ativo: {result.get('ativo')}")
            
            return True
        else:
            print(f"‚ùå ERRO NO REGISTRO!")
            print(f"Status Code: {response.status_code}")
            print(f"Resposta: {response.text}")
            
            # Tentar parsear o erro
            try:
                error_data = response.json()
                if "detail" in error_data:
                    print(f"Detalhes do erro: {error_data['detail']}")
            except:
                pass
            
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå TIMEOUT - O servidor demorou mais de 30s para responder")
        print("üîß Verifique se a otimiza√ß√£o do bcrypt funcionou")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå ERRO DE CONEX√ÉO - Servidor n√£o est√° rodando")
        print("üí° Inicie o servidor backend com: uvicorn app.main:app --reload")
        return False
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {e}")
        return False

def test_duplicate_registration():
    """Testa registro duplicado para verificar valida√ß√µes"""
    print("\nüß™ TESTE DE REGISTRO DUPLICADO")
    print("=" * 60)
    
    # Usar dados que provavelmente j√° existem
    user_data = {
        "cpf": "12345678901",
        "nome": "Usu√°rio Duplicado",
        "email": "duplicado@test.com",
        "senha": "teste123",
        "tipo": "cliente"
    }
    
    try:
        response = requests.post(
            REGISTER_ENDPOINT,
            json=user_data,
            timeout=15
        )
        
        if response.status_code == 400:
            error_data = response.json()
            detail = error_data.get('detail', '')
            
            if 'CPF j√° cadastrado' in detail or 'Email j√° cadastrado' in detail:
                print("‚úÖ VALIDA√á√ÉO DE DUPLICATAS FUNCIONANDO")
                print(f"Erro esperado: {detail}")
                return True
            else:
                print(f"‚ö†Ô∏è Erro diferente do esperado: {detail}")
                return False
        elif response.status_code == 200:
            print("‚ö†Ô∏è Registro permitiu duplicata (pode n√£o ser problema se CPF/email √∫nicos)")
            return True
        else:
            print(f"‚ùå Status inesperado: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de duplicata: {e}")
        return False

def test_invalid_data():
    """Testa valida√ß√£o de dados inv√°lidos"""
    print("\nüß™ TESTE DE VALIDA√á√ÉO DE DADOS")
    print("=" * 60)
    
    # Teste com CPF inv√°lido
    invalid_data = {
        "cpf": "123",  # CPF muito curto
        "nome": "",    # Nome vazio
        "email": "email_invalido",  # Email sem @
        "senha": "1",  # Senha muito curta
        "tipo": "cliente"
    }
    
    try:
        response = requests.post(
            REGISTER_ENDPOINT,
            json=invalid_data,
            timeout=10
        )
        
        if response.status_code == 400:
            print("‚úÖ VALIDA√á√ÉO DE DADOS INV√ÅLIDOS FUNCIONANDO")
            error_data = response.json()
            print(f"Erros de valida√ß√£o: {error_data.get('detail')}")
            return True
        else:
            print(f"‚ö†Ô∏è Status inesperado para dados inv√°lidos: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de valida√ß√£o: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ TESTE COMPLETO DO SISTEMA DE REGISTRO")
    print("üîß Validando corre√ß√µes implementadas:")
    print("   - Corre√ß√£o do tipo de usu√°rio (enum)")
    print("   - Otimiza√ß√£o do bcrypt (menos rounds)")
    print("   - Valida√ß√µes gerais")
    print("=" * 60)
    
    results = []
    
    # Teste principal
    print("1Ô∏è‚É£ Teste de registro b√°sico:")
    results.append(test_user_registration())
    
    # Teste de duplicata
    print("2Ô∏è‚É£ Teste de valida√ß√£o de duplicatas:")
    results.append(test_duplicate_registration())
    
    # Teste de valida√ß√£o
    print("3Ô∏è‚É£ Teste de valida√ß√£o de dados:")
    results.append(test_invalid_data())
    
    # Resultado final
    print("\n" + "=" * 60)
    print("üìä RESULTADO DOS TESTES:")
    
    test_names = [
        "Registro b√°sico",
        "Valida√ß√£o duplicatas", 
        "Valida√ß√£o dados"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {i+1}. {name}: {status}")
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüéØ RESUMO: {success_count}/{total_count} testes passaram")
    
    if success_count == total_count:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ As corre√ß√µes no sistema de registro est√£o funcionando")
    else:
        print("‚ö†Ô∏è Alguns testes falharam")
        print("üîß Verifique os logs acima para mais detalhes")

if __name__ == "__main__":
    main()
